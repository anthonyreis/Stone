service: stone

frameworkVersion: '2'

provider:
  name: aws
  endpointType: regional
  stage: ${opt:stage, 'dev'}
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: sa-east-1
  memorySize: 256
  environment:
    USER_TABLE_NAME: ${self:custom.UserTable.name}
    JWT_KEY: 240ec54a-2e0a-420f-9af9-5260ee6cdec2
  iamRoleStatements:
    - ${file(iam/UserTableIAM.yml):UserTableIAM}
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        functionName: authFunc
        identitySource: $request.header.Authorization

resources:
  Resources:
    UserTable: ${file(resources/UserTable.yml):UserTable}

functions:
  authFunc:
    handler: common/auth/index.auth

  incrementCounter:
    handler: src/handlers/incrementCounter/handler.handler
    events:
      - httpApi:
          path: /counter/{key}
          method: post

  getCounter:
    handler: src/handlers/getCounter/handler.handler
    events:
      - httpApi:
          path: /counter/{key}
          method: get

  createUser:
    handler: src/handlers/createUser/handler.handler
    events:
      - httpApi:
          path: /user
          method: post

  getUser:
    handler: src/handlers/getUser/handler.handler
    events:
      - httpApi:
          path: /user/{id}
          method: get
          authorizer: customAuthorizer

custom:
  serverless-offline:
    host: 0.0.0.0
    port: 3000

  UserTable:
    name: !Ref UserTable
    arn: !GetAtt UserTable.Arn

plugins:
  - serverless-offline